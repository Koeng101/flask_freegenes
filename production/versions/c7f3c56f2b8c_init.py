"""init

Revision ID: c7f3c56f2b8c
Revises: 
Create Date: 2019-03-27 09:37:37.284342

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c7f3c56f2b8c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('collections',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('time_created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('parent_uuid', postgresql.UUID(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('readme', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['parent_uuid'], ['collections.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('protocols',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('time_created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('protocol', sa.JSON(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('robots',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('right_300', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('left_10', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('robot_name', sa.String(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('left_10'),
    sa.UniqueConstraint('right_300'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('tags',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('tag', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('users',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('username', sa.String(length=32), nullable=True),
    sa.Column('password_hash', sa.String(length=64), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=False)
    op.create_table('parts',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('time_created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('gene_id', sa.String(), nullable=True),
    sa.Column('part_type', sa.String(), nullable=True),
    sa.Column('original_sequence', sa.String(), nullable=True),
    sa.Column('optimized_sequence', sa.String(), nullable=True),
    sa.Column('synthesized_sequence', sa.String(), nullable=True),
    sa.Column('full_sequence', sa.String(), nullable=True),
    sa.Column('genbank', sa.JSON(), nullable=True),
    sa.Column('vector', sa.String(), nullable=True),
    sa.Column('primer_for', sa.String(), nullable=True),
    sa.Column('primer_rev', sa.String(), nullable=True),
    sa.Column('barcode', sa.String(), nullable=True),
    sa.Column('vbd', sa.String(), nullable=True),
    sa.Column('resistance', sa.String(), nullable=True),
    sa.Column('collection_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('plates',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('time_created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('breadcrumb', sa.String(), nullable=True),
    sa.Column('plate_name', sa.String(length=32), nullable=True),
    sa.Column('plate_form', sa.String(length=32), nullable=True),
    sa.Column('plate_type', sa.String(length=32), nullable=True),
    sa.Column('protocol_uuid', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['protocol_uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('tags_collection',
    sa.Column('tags_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('collection_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['collection_uuid'], ['collections.uuid'], ),
    sa.ForeignKeyConstraint(['tags_uuid'], ['tags.uuid'], ),
    sa.PrimaryKeyConstraint('tags_uuid', 'collection_uuid')
    )
    op.create_table('samples',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('time_created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('part_uuid', postgresql.UUID(), nullable=False),
    sa.Column('derived_from', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['derived_from'], ['samples.uuid'], ),
    sa.ForeignKeyConstraint(['part_uuid'], ['parts.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('tags_parts',
    sa.Column('tags_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('part_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['part_uuid'], ['parts.uuid'], ),
    sa.ForeignKeyConstraint(['tags_uuid'], ['tags.uuid'], ),
    sa.PrimaryKeyConstraint('tags_uuid', 'part_uuid')
    )
    op.create_table('wells',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('time_created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('address', sa.String(length=32), nullable=False),
    sa.Column('volume', sa.Float(), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('media', sa.String(length=32), nullable=True),
    sa.Column('well_type', sa.String(length=32), nullable=True),
    sa.Column('organism', sa.String(), nullable=True),
    sa.Column('plate_uuid', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['plate_uuid'], ['plates.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('samples_wells',
    sa.Column('samples_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('wells_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['samples_uuid'], ['samples.uuid'], ),
    sa.ForeignKeyConstraint(['wells_uuid'], ['wells.uuid'], ),
    sa.PrimaryKeyConstraint('samples_uuid', 'wells_uuid')
    )
    op.create_table('sequencing',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('time_created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sequencing_id', sa.String(), nullable=True),
    sa.Column('sequencing_notes', sa.String(), nullable=True),
    sa.Column('sequencing_type', sa.String(), nullable=True),
    sa.Column('machine', sa.String(), nullable=True),
    sa.Column('sequencing_provider', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('sequence', sa.String(), nullable=True),
    sa.Column('sample_uuid', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['sample_uuid'], ['samples.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('pileups',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('sequence', sa.String(), nullable=True),
    sa.Column('position', sa.Integer(), nullable=True),
    sa.Column('reference_base', sa.String(), nullable=True),
    sa.Column('read_count', sa.Integer(), nullable=True),
    sa.Column('read_results', sa.String(), nullable=True),
    sa.Column('quality', sa.String(), nullable=True),
    sa.Column('sequencing_uuid', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['sequencing_uuid'], ['sequencing.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pileups')
    op.drop_table('sequencing')
    op.drop_table('samples_wells')
    op.drop_table('wells')
    op.drop_table('tags_parts')
    op.drop_table('samples')
    op.drop_table('tags_collection')
    op.drop_table('plates')
    op.drop_table('parts')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_table('users')
    op.drop_table('tags')
    op.drop_table('robots')
    op.drop_table('protocols')
    op.drop_table('collections')
    # ### end Alembic commands ###
